# Задание 3:

# Рассмотрим пример, где создадим декоратор, который измеряет время выполнения функции:

# Импортируем модуль time для работы с функциями времени
import time


# Определяем декоратор timer для измерения времени выполнения функции
def timer(func):
    # Определяем функцию-обертку
    def wrapper(*args, **kwargs):
        # Записываем время начала выполнения функции
        start_time = time.time()
        # Вызываем оригинальную функцию с переданными аргументами и сохраняем результат
        result = func(*args, **kwargs)
        # Записываем время окончания выполнения функции
        end_time = time.time()
        # Вычисляем и печатаем время выполнения функции
        print(f"Время выполнения функции {func.__name__}: {end_time - start_time} сек.")
        # Возвращаем результат выполнения оригинальной функции
        return result
    # Возвращаем функцию-обертку
    return wrapper


# Применяем декоратор timer к функции some_function
@timer
def some_function():
    # Функция some_function, которая просто делает паузу на 2 секунды
    time.sleep(2)


# Вызываем декорированную функцию some_function
some_function()


# Здесь мы определяем декоратор timer, который принимает функцию func и возвращает функцию-обертку wrapper.
# Функция-обертка вызывает функцию func, замеряет время ее выполнения и сохраняет результат работы func в переменную result.
# Затем функция-обертка выводит время выполнения функции на экран и возвращает результат вызова функции.
# В конце применяем декоратор timer к функции some_function.
# Когда мы вызываем функцию some_function, декоратор автоматически вызывается и выводит время выполнения функции на экран.

