from functools import reduce

# Пример 1: Простая лямбда функция (когда требуется анонимная функция в течение короткого периода времени)

# Лямбда-функция для удвоения значения
double = lambda x: x * 2
print(double(5))  # 10

# Пример 2: Использование с filter()

# Использование filter() с лямбда-функцией для выбора четных чисел из списка
my_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(filter(lambda x: (x % 2 == 0), my_list))
print(new_list)  # [4, 6, 10, 12, 14]
# Функция filter() принимает функцию и итерируемый объект.
# Она возвращает новый итерируемый объект, содержащий только те элементы, для которых функция возвращает True.
# В данном случае, лямбда-функция проверяет, является ли число четным.

# Пример 3: Использование с map()

# Использование map() с лямбда-функцией для удвоения каждого элемента списка
current_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(map(lambda x: x * 2, current_list))
print(new_list)  # [2, 6, 8, 12, 20, 22, 30, 24, 28]
# Функция map() применяет заданную функцию к каждому элементу итерируемого объекта и возвращает новый итерируемый объект с преобразованными элементами.
# В данном случае, лямбда-функция удваивает каждое число.


# Пример 4: Использование с reduce()

# # Использование reduce() с лямбда-функцией для суммирования всех элементов списка
current_list = [5, 15, 20, 30, 50, 55, 75, 60, 70]
summa = reduce((lambda x, y: x + y), current_list)
print(summa)  # 380
# Функция reduce() применяет бинарную функцию (функцию, принимающую два аргумента) к итерируемому объекту, накапливая результат.
# В данном случае, лямбда-функция суммирует два числа.

# Пример 5: Условные операторы в лямбда-функциях

# # Лямбда-функция для нахождения максимального из двух чисел
max_number = lambda a, b: a if a > b else b
print(max_number(3, 5))  # 5
